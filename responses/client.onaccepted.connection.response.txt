CLIENT INPUT:
  PACKET:
    byte    ID_CONNECTION_REQUEST_ACCEPTED=34
    4bytes  binaryAddress
    ushort  port
    ushort  playerID
    uint    uiChallenge //Random value generated by server at startup

PROCESS:
    BYTE byteMod = 1;
    iVersion = NETGAME_VERSION
    char auth_bs[4*16] = {0};
    gen_gpci(auth_bs, 0x3e9);
    uiClientChallengeResponse = uiChallenge ^ iVersion

CLIENT OUTPUT:
  PACKET:
    int 	iVersion
    byte	byteMod
    byte	byteNameLen
    char*	g_szNickName
    uint	uiClientChallengeResponse
    byte	byteAuthBSLen
    char*	auth_bs
    byte	iClientVerLen
    char*	settings.szClientVersion

MISC:

int gen_gpci(char buf[64], unsigned long factor) /* by bartekdvd */
{
	unsigned char out[6*4] = {0};

	static const char alphanum[] =
		"0123456789"
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ";

	for (int i = 0; i < 6*4; ++i)
		out[i] = alphanum[rand() % (sizeof(alphanum) - 1)];

	out[6*4] = 0;

	BIG_NUM_MUL((unsigned long*)out, (unsigned long*)out, factor);

	unsigned int notzero = 0;
	buf[0] = '0'; buf[1] = '\0';

	if (factor == 0) return 1;

	int pos = 0;
	for (int i = 0; i < 24; i++)
	{
		unsigned char tmp = out[i] >> 4;
		unsigned char tmp2 = out[i]&0x0F;
		
		if (notzero || tmp)
		{
			buf[pos++] = (char)((tmp > 9)?(tmp + 55):(tmp + 48));
			if (!notzero) notzero = 1;
		}

		if (notzero || tmp2)
		{
			buf[pos++] = (char)((tmp2 > 9)?(tmp2 + 55):(tmp2 + 48));
			if (!notzero) notzero = 1;
		}
	}
	buf[pos] = 0;

	return pos;
}


void BIG_NUM_MUL(unsigned long in[5], unsigned long out[6], unsigned long factor)
{
	/*
		Based on TTMath library by Tomasz Sowa.
	*/

	unsigned long src[5] = {0};
	for (int i = 0; i < 5; i++)
		src[i] = ((in[4-i]>>24) | ((in[4-i]<<8) & 0x00FF0000) | ((in[4-i]>>8) & 0x0000FF00) | (in[4-i]<<24));

	unsigned long long tmp = 0;

	tmp = unsigned long long(src[0])*unsigned long long(factor);
	out[0] = tmp&0xFFFFFFFF;
	out[1] = tmp>>32;
	tmp = unsigned long long(src[1])*unsigned long long(factor) + unsigned long long(out[1]);
	out[1] = tmp&0xFFFFFFFF;
	out[2] = tmp>>32;
	tmp = unsigned long long(src[2])*unsigned long long(factor) + unsigned long long(out[2]);
	out[2] = tmp&0xFFFFFFFF;
	out[3] = tmp>>32;
	tmp = unsigned long long(src[3])*unsigned long long(factor) + unsigned long long(out[3]);
	out[3] = tmp&0xFFFFFFFF;
	out[4] = tmp>>32;
	tmp = unsigned long long(src[4])*unsigned long long(factor) + unsigned long long(out[4]);
	out[4] = tmp&0xFFFFFFFF;
	out[5] = tmp>>32;

	for (int i = 0; i < 12; i++)
	{
		unsigned char temp = ((unsigned char*)out)[i];
		((unsigned char*)out)[i] = ((unsigned char*)out)[23 - i];
		((unsigned char*)out)[23 - i] = temp;
	}
}