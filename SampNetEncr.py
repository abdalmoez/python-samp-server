import binascii
import Packet
from Reliability import *
sampEncrTable = [ # 256 elements
    0x27, 0x69, 0xFD, 0x87, 0x60, 0x7D, 0x83, 0x02, 0xF2, 0x3F, 0x71, 0x99, 0xA3, 0x7C, 0x1B, 0x9D,
    0x76, 0x30, 0x23, 0x25, 0xC5, 0x82, 0x9B, 0xEB, 0x1E, 0xFA, 0x46, 0x4F, 0x98, 0xC9, 0x37, 0x88,
    0x18, 0xA2, 0x68, 0xD6, 0xD7, 0x22, 0xD1, 0x74, 0x7A, 0x79, 0x2E, 0xD2, 0x6D, 0x48, 0x0F, 0xB1,
    0x62, 0x97, 0xBC, 0x8B, 0x59, 0x7F, 0x29, 0xB6, 0xB9, 0x61, 0xBE, 0xC8, 0xC1, 0xC6, 0x40, 0xEF,
    0x11, 0x6A, 0xA5, 0xC7, 0x3A, 0xF4, 0x4C, 0x13, 0x6C, 0x2B, 0x1C, 0x54, 0x56, 0x55, 0x53, 0xA8,
    0xDC, 0x9C, 0x9A, 0x16, 0xDD, 0xB0, 0xF5, 0x2D, 0xFF, 0xDE, 0x8A, 0x90, 0xFC, 0x95, 0xEC, 0x31,
    0x85, 0xC2, 0x01, 0x06, 0xDB, 0x28, 0xD8, 0xEA, 0xA0, 0xDA, 0x10, 0x0E, 0xF0, 0x2A, 0x6B, 0x21,
    0xF1, 0x86, 0xFB, 0x65, 0xE1, 0x6F, 0xF6, 0x26, 0x33, 0x39, 0xAE, 0xBF, 0xD4, 0xE4, 0xE9, 0x44,
    0x75, 0x3D, 0x63, 0xBD, 0xC0, 0x7B, 0x9E, 0xA6, 0x5C, 0x1F, 0xB2, 0xA4, 0xC4, 0x8D, 0xB3, 0xFE,
    0x8F, 0x19, 0x8C, 0x4D, 0x5E, 0x34, 0xCC, 0xF9, 0xB5, 0xF3, 0xF8, 0xA1, 0x50, 0x04, 0x93, 0x73,
    0xE0, 0xBA, 0xCB, 0x45, 0x35, 0x1A, 0x49, 0x47, 0x6E, 0x2F, 0x51, 0x12, 0xE2, 0x4A, 0x72, 0x05,
    0x66, 0x70, 0xB8, 0xCD, 0x00, 0xE5, 0xBB, 0x24, 0x58, 0xEE, 0xB4, 0x80, 0x81, 0x36, 0xA9, 0x67,
    0x5A, 0x4B, 0xE8, 0xCA, 0xCF, 0x9F, 0xE3, 0xAC, 0xAA, 0x14, 0x5B, 0x5F, 0x0A, 0x3B, 0x77, 0x92,
    0x09, 0x15, 0x4E, 0x94, 0xAD, 0x17, 0x64, 0x52, 0xD3, 0x38, 0x43, 0x0D, 0x0C, 0x07, 0x3C, 0x1D,
    0xAF, 0xED, 0xE7, 0x08, 0xB7, 0x03, 0xE6, 0x8E, 0xAB, 0x91, 0x89, 0x3E, 0x2C, 0x96, 0x42, 0xD9,
    0x78, 0xDF, 0xD0, 0x57, 0x5D, 0x84, 0x41, 0x7E, 0xCE, 0xF7, 0x32, 0xC3, 0xD5, 0x20, 0x0B, 0xA7
]

sampDecrTable = [ # 256 elements
    0xB4, 0x62, 0x07, 0xE5, 0x9D, 0xAF, 0x63, 0xDD, 0xE3, 0xD0, 0xCC, 0xFE, 0xDC, 0xDB, 0x6B, 0x2E,
    0x6A, 0x40, 0xAB, 0x47, 0xC9, 0xD1, 0x53, 0xD5, 0x20, 0x91, 0xA5, 0x0E, 0x4A, 0xDF, 0x18, 0x89,
    0xFD, 0x6F, 0x25, 0x12, 0xB7, 0x13, 0x77, 0x00, 0x65, 0x36, 0x6D, 0x49, 0xEC, 0x57, 0x2A, 0xA9,
    0x11, 0x5F, 0xFA, 0x78, 0x95, 0xA4, 0xBD, 0x1E, 0xD9, 0x79, 0x44, 0xCD, 0xDE, 0x81, 0xEB, 0x09,
    0x3E, 0xF6, 0xEE, 0xDA, 0x7F, 0xA3, 0x1A, 0xA7, 0x2D, 0xA6, 0xAD, 0xC1, 0x46, 0x93, 0xD2, 0x1B,
    0x9C, 0xAA, 0xD7, 0x4E, 0x4B, 0x4D, 0x4C, 0xF3, 0xB8, 0x34, 0xC0, 0xCA, 0x88, 0xF4, 0x94, 0xCB,
    0x04, 0x39, 0x30, 0x82, 0xD6, 0x73, 0xB0, 0xBF, 0x22, 0x01, 0x41, 0x6E, 0x48, 0x2C, 0xA8, 0x75,
    0xB1, 0x0A, 0xAE, 0x9F, 0x27, 0x80, 0x10, 0xCE, 0xF0, 0x29, 0x28, 0x85, 0x0D, 0x05, 0xF7, 0x35,
    0xBB, 0xBC, 0x15, 0x06, 0xF5, 0x60, 0x71, 0x03, 0x1F, 0xEA, 0x5A, 0x33, 0x92, 0x8D, 0xE7, 0x90,
    0x5B, 0xE9, 0xCF, 0x9E, 0xD3, 0x5D, 0xED, 0x31, 0x1C, 0x0B, 0x52, 0x16, 0x51, 0x0F, 0x86, 0xC5,
    0x68, 0x9B, 0x21, 0x0C, 0x8B, 0x42, 0x87, 0xFF, 0x4F, 0xBE, 0xC8, 0xE8, 0xC7, 0xD4, 0x7A, 0xE0,
    0x55, 0x2F, 0x8A, 0x8E, 0xBA, 0x98, 0x37, 0xE4, 0xB2, 0x38, 0xA1, 0xB6, 0x32, 0x83, 0x3A, 0x7B,
    0x84, 0x3C, 0x61, 0xFB, 0x8C, 0x14, 0x3D, 0x43, 0x3B, 0x1D, 0xC3, 0xA2, 0x96, 0xB3, 0xF8, 0xC4,
    0xF2, 0x26, 0x2B, 0xD8, 0x7C, 0xFC, 0x23, 0x24, 0x66, 0xEF, 0x69, 0x64, 0x50, 0x54, 0x59, 0xF1,
    0xA0, 0x74, 0xAC, 0xC6, 0x7D, 0xB5, 0xE6, 0xE2, 0xC2, 0x7E, 0x67, 0x17, 0x5E, 0xE1, 0xB9, 0x3F,
    0x6C, 0x70, 0x08, 0x99, 0x45, 0x56, 0x76, 0xF9, 0x9A, 0x97, 0x19, 0x72, 0x5C, 0x02, 0x8F, 0x58
]



def unKyretardizeDatagram(buf: bytearray, buflen: int, port: int,  unk: int):
    bChecksumEncr = buf[0]
    buflen -= 1
    # memcpy(decrBuffer, buf + 1, buflen);
    decrBuffer = buf[1:]
    bPort = port ^ 0xCC
    for i in range(buflen):
        if(unk==0):
            decrBuffer[i] = (unk ^ decrBuffer[i]) & 0xff
            unk += 1
        else:
            decrBuffer[i] = (bPort ^ decrBuffer[i]) & 0xff
            unk -= 1

        decrBuffer[i] = sampDecrTable[decrBuffer[i]]

    bChecksum = 0
    for i in range(buflen):
        bData = decrBuffer[i]
        bChecksum ^= (bData & 0xAA)
    
    if(bChecksum != bChecksumEncr):
        print("[WARNING] Invalid checksum: bChecksum ",bChecksum," != bChecksumEncr %d", bChecksumEncr)
        return False
    return decrBuffer

def testSampNetEncr():
    packets = [
        # Expected => b'1861bb'
        bytearray([0x82, 0x1E, 0x6F, 0x80]),
        # Expected => b'000043800b'
        bytearray([0x88, 0x27, 0x8A, 0xC7, 0xD8, 0x99])
    ]

    # refusedConnectionPackets = [
    #     {True, bytearray([0x22,0x1e,0x12,0xdc])},
    #     {True, bytearray([0x88,0x27,0x8a,0xc7,0xd8,0x99])},
    #     #server
    #     {False, bytearray([0xe3,0x00,0x00,0x00,0x00,0x85,0x30,0x0c,0x11,0x35,0x44,0x46,0x31,0x36,0x37,0x39,0x39,0x31,0x43,0x33,0x30,0x36,0x43,0x34,0x31,0x00])},
    #     #client
    #     {True, bytearray([0xa2,0x08,0x8a,0x27])},
    #     {True, bytearray([0x08, 0x27, 0xd8, 0x11, 0x4d, 0xfd, 0x0e, 0x7a, 0xc7, 0x61, 0xc7, 0x62, 0x26, 0xbc, 0x1b, 0x97, 0x26, 0x8b, 0xd2, 0x59, 0xc7, 0x3a, 0xf4, 0x6a, 0x6a, 0xbc, 0xcc, 0x3a, 0x6a, 0x61, 0xd2, 0x4c, 0x6a, 0x97, 0x26, 0x4c, 0x1b, 0xf4, 0xcc, 0x29, 0x14, 0x3a, 0x6a, 0x6a, 0x59, 0x8b, 0x11, 0x59])}

    # ]

    lworConnectedPackets = [
        [False, bytearray([0x08, 0x1e, 0x77, 0xda])],
        [False, bytearray([0x1A, 0x08, 0xD2])],
        [True , bytearray([0x82, 0x1e, 0x6f, 0x80])],
        [False, bytearray([0x19, 0x00])],
        [True , bytearray([0x88, 0x27, 0x8a, 0xc7, 0xd8, 0x99])],        
        [False, bytearray([0xe3,0x00,0x00])],
        [False, bytearray([0x00, 0x00, 0x42, 0x98, 0x0c, 0x11, 0x31, 0x41, 0x35, 0x32, 0x37, 0x46, 0x34, 0x34, 0x34, 0x35, 0x34, 0x31, 0x32, 0x46, 0x39, 0x35, 0x00])], 
        [True , bytearray([0xa2, 0x08, 0x8a, 0x27])],
        [True , bytearray([0x02, 0x27, 0xd8, 0x11, 0x4d, 0xfd, 0x0e, 0x7a, 0xd2, 0x3a, 0x97, 0xa5, 0xe1, 0x3a, 0xe1, 0xc7, 0xd2, 0x61, 0x14, 0x7f, 0x11, 0x59, 0x08, 0xbc, 0xcc, 0x3a, 0x84, 0xbc, 0x97, 0x29, 0x6a, 0xb6, 0xd2, 0xf4, 0xcc, 0xc7, 0x3a, 0x62, 0xf4, 0x4c, 0x97, 0xb9, 0x08, 0xf4, 0x1b, 0xb9, 0x59, 0x59])],
        [False, bytearray([0xE3, 0x01, 0x00]) ],
        [False, bytearray([0x00, 0x80, 0x42, 0x68, 0x22, 0xc5, 0x02, 0x16, 0xac, 0x67, 0xf0, 0x00, 0x00, 0xc6, 0x4c, 0x87, 0x54])],
        
        [True, bytearray([0xa2, 0x08, 0xc4, 0x27])],
        [True, bytearray([0x28, 0x69, 0x8a, 0xa5, 0x14, 0x37, 0x26, 0xd1, 0xd9, 0x9d, 0x6f, 0x37, 0x2a, 0x27, 0x76, 0xdc, 0x2e, 0x99, 0x3c, 0x36, 0xeb, 0x60, 0x8a, 0xa6, 0x8a, 0x79, 0xd0, 0x27, 0x90, 0x2c, 0x5f, 0xc5, 0x57, 0x5f, 0x8a, 0x90, 0x0f, 0xaf, 0x8a, 0x27, 0x0f, 0xda, 0xe7, 0x48, 0x5d, 0x12, 0x93, 0x55, 0x81, 0x8d, 0xc0, 0x6d, 0xab, 0xab, 0x5c, 0x89, 0xd6, 0xd8, 0x7c, 0xf2, 0x07, 0xe3, 0x06, 0x4c, 0x06, 0x9e, 0xaf, 0x83, 0xc1, 0x6c, 0x0d, 0x6e, 0x7c, 0xd8, 0x4e, 0x8e, 0x2e, 0x5c, 0x75, 0xd1, 0x75, 0x49, 0x4b, 0x83, 0x47, 0x83, 0x75, 0xd8, 0x4b, 0x6c, 0xe1, 0xf2, 0x33, 0x49, 0x2e, 0xf2, 0x75, 0xaa, 0x07, 0x4c, 0xb5, 0x49, 0xd0, 0xe3, 0x85, 0xe3, 0xa5, 0xab, 0x5c, 0x89, 0xd8])],
        [True, bytearray([0x00, 0x87, 0x8a, 0xbc, 0xd7, 0x83, 0x9d, 0x91, 0x9b, 0x46])],
        [False, bytearray([0xe5, 0x02, 0x00, 0x02, 0x00, 0x02, 0x80, 0x00])]
    ]


    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    ENDC    = '\033[0m'

    bufout=[]
    re = None
    for i in range(len(lworConnectedPackets)):
        
        line = ""
        if(i==0 or lworConnectedPackets[i][0]==False):
            if(i==0):
                line += OKGREEN + "CLIENT"+ " |     "
            else:
                line += "SERVER" + " |     "
            bufout = lworConnectedPackets[i][1]
        else:
            line += OKGREEN + "CLIENT" + " | ENCR"            
            bufout = unKyretardizeDatagram(lworConnectedPackets[i][1], len(lworConnectedPackets[i][1]), 7777, 0)
        
        try:
            re = Reliability(bufout)
        except IndexError as e:
            re = "UNKNOWN"

        msg_type = str(bufout[0])
        msg_type_name = ""

        if(msg_type in Packet.IDS.keys()):
            msg_type_name = Packet.IDS[msg_type]
        else:
            if(type(re)== str):
                msg_type_name = re
            elif(str(re.data[0]) in Packet.IDS.keys()):
                msg_type_name = Packet.IDS[str(re.data[0])]
            else:
                msg_type_name =  "UNKNOWN"
        line +=" | "+msg_type_name
        for i in range(37 - len(msg_type_name)):
            line += " "
        line +=" | " + str(binascii.hexlify(bufout[:38]))
        if(len(bufout)>38):
            line += " ..."
        else:
            for i in range(40 - len(bufout[:38])):
                line += "  "
        line += " | " + re.__str__()[:90] + ENDC
        # line += " | " + str(bufout[:24])
        # if(len(bufout)>24):
        #     line += " ..."
        
            
        
        print(line)
    


    

testSampNetEncr()
